# - cutadapt, Bowtie2, sambamba, deepTools
import glob, os, yaml

maindir = os.path.abspath(workflow.basedir)
# configfile: None

samplenames, = glob_wildcards(os.path.join(config['bamdir'],'{sample}.filtered.bam'))
samplenames.sort()
print(samplenames)

print(config)

sheet_set=config['samplesheets'] if "samplesheets" in config.keys() else None

print('---')
print(sheet_set)
print('---')


def eisa_run_junc(sheet_set, modes):

    if sheet_set:
        return(expand(os.path.join("eisa_analysis_junc.{mode}","eisa_{sheet}.exon_intron.tsv"), sheet = sheet_set.keys(), mode = modes))
    else:
        return([])

def eisa_run_classic(sheet_set, modes):

    if sheet_set:
        return(expand(os.path.join("eisa_analysis_default.{mode}","eisa_{sheet}.exon_intron.tsv"), sheet = sheet_set.keys(), mode = modes))
    else:
        return([])


localrules: run_eisa_junctions, run_eisa_default

rule all:
    input:
        expand(os.path.join("bamCoverage","{sample}.eij.bw"), sample = samplenames),
        expand(os.path.join("featureCounts.eej_{mode}","featureCounts.tsv"), mode = ['paired']),
        expand(os.path.join("featureCounts.eij_{mode}","featureCounts.tsv"), mode = ['paired']),
        eisa_run_junc(sheet_set, ['paired']),
        eisa_run_classic(sheet_set, ['paired'])


rule make_featuredb:
    input:
        gtf=config['annotation'],
        script=os.path.join(maindir, "scripts", "make_feature_db.R")
    output:
        genes = os.path.join("feature_db", os.path.basename(config['annotation']).replace('.gtf','') + ".genes.bed"),
        exons = os.path.join("feature_db", os.path.basename(config['annotation']).replace('.gtf','') + ".exonic_database.bed"),
        introns = os.path.join("feature_db", os.path.basename(config['annotation']).replace('.gtf','') + ".intronic_database.bed")
    params:
        outdir = os.path.join('feature_db')
    shell:
        """
        Rscript {input.script} {input.gtf} {params.outdir} && \
            bedtools subtract -s -a {output.genes} -b {output.exons} > {output.introns}
        """

# samtools executes per aligned reads, can be considered SE mode
rule extract_exonic:
    input:
        bam=os.path.join(os.path.join(config['bamdir'],"{sample}.filtered.bam")),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        # exon_db=config['exonic_db']
        exon_db=rules.make_featuredb.output.exons
    output:
        bam=temp(os.path.join("tmp","{sample}.exonic.bam")), # ${outprefix}.exonic.bam
        bai=temp(os.path.join("tmp","{sample}.exonic.bam.bai"))
    threads: 6
    shell:
        "samtools view -@ {threads} -b -o {output.bam} -L {input.exon_db} {input.bam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule extract_intronic:
    input:
        bam=rules.extract_exonic.output.bam,
        # exon_db=config['intronic_db']
        intron_db=rules.make_featuredb.output.introns
    output:
        bam=temp(os.path.join("tmp","{sample}.eij.bam")), # ${outprefix}.exonic.bam
        bai=temp(os.path.join("tmp","{sample}.eij.bam.bai"))
    threads: 6
    shell:
        "samtools view -@ {threads} -b -o {output.bam} -L {input.intron_db} {input.bam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule filter_CIGAR:
    input:
        bam=rules.extract_intronic.output.bam
    output:
        sam=temp(os.path.join("tmp","{sample}.eij_CIGAR_M.sam")),
        bam=temp(os.path.join("tmp","{sample}.eij_CIGAR_M.bam")),
        bai=temp(os.path.join("tmp","{sample}.eij_CIGAR_M.bam.bai"))
    threads: 6
    shell:
        "samtools view -H -@ {threads} {input.bam} > {output.sam} && samtools view -@ {threads} {input.bam} | awk '$6 ~ \"^[[:digit:]]+M$\"' >> {output.sam} && samtools view -@ {threads} -S -b -o {output.bam} {output.sam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule bamCoverage:
    input:
        bam=rules.filter_CIGAR.output.bam,
        bai=rules.filter_CIGAR.output.bai
    output:
        bigwig=os.path.join("bamCoverage","{sample}.eij.bw")
    params:
        params="--binSize 1 --normalizeUsing CPM"
    threads: 12
    log: os.path.join("bamCoverage","log","{sample}.eij.log")
    shell:
        "bamCoverage -p {threads} {params} -b {input.bam} -o {output.bigwig} &> {log}"

rule featureCounts_eij:
    input:
        bamset=expand(os.path.join("tmp","{sample}.eij_CIGAR_M.bam"), sample = samplenames),
        baiset=expand(os.path.join("tmp","{sample}.eij_CIGAR_M.bam.bai"), sample = samplenames),
        gtf=config['annotation']
    output:
        tab=os.path.join("featureCounts.eij_{mode}","featureCounts.tsv")
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t gene -g gene_id -f -s 2"
    threads: 24
    log: os.path.join("featureCounts.eij_{mode}","log","featureCounts.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.gtf} -o {output.tab} {input.bamset} &> {log}"


rule featureCounts_eej:
    input:
        bamset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam'), sample = samplenames),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        gtf=config['annotation']
    output:
        tab=os.path.join("featureCounts.eej_{mode}","featureCounts.tsv"),
        tab_junctions=os.path.join("featureCounts.eej_{mode}","featureCounts.tsv.jcounts")
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t gene -g gene_id -f -s 2 -J"
    threads: 24
    log: os.path.join("featureCounts.eej_{mode}","log","featureCounts.mode.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.gtf} -o {output.tab} {input.bamset} &> {log}"




rule featureCounts_exons:
    input:
        bamset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam'), sample = samplenames),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        saf=config['annotation']
    output:
        tab=os.path.join("featureCounts.classic_{mode}","featureCounts_exons.tsv")
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t exon -g gene_id -s 2"
    threads: 24
    log: os.path.join("featureCounts.classic_{mode}","log","featureCounts_exons.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.saf} -o {output.tab} {input.bamset} &> {log}"


rule featureCounts_genes:
    input:
        bamset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam'), sample = samplenames),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        gtf=config['annotation']
    output:
        tab=os.path.join("featureCounts.classic_{mode}","featureCounts_genes.tsv"),
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t gene -g gene_id -s 2"
    threads: 24
    log: os.path.join("featureCounts.classic_{mode}","log","featureCounts_genes.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.gtf} -o {output.tab} {input.bamset} &> {log}"


if sheet_set:
    rule run_eisa_junctions:
        input:
            genes_count=os.path.join("featureCounts.eej_{mode}","featureCounts.tsv"),
            exons_count=os.path.join("featureCounts.eej_{mode}","featureCounts.tsv.jcounts"),
            introns_count=os.path.join("featureCounts.eij_{mode}","featureCounts.tsv"),
            gtf=config['annotation'],
            samplesheet=lambda wildcards: sheet_set[wildcards.sheet],
            script=os.path.join(maindir,"scripts","eisa.analysis.R")
        output:
            os.path.join("eisa_analysis_junc.{mode}","eisa_{sheet}.exon_intron.tsv")
        params:
            outprefix=os.path.join("eisa_analysis_junc.{mode}","eisa_{sheet}")
        log:
            os.path.join("eisa_analysis_junc.{mode}","log","eisa_{sheet}.exon_intron.log")
        shell:
            "Rscript {input.script} -g {input.genes_count} -e {input.exons_count} -i {input.introns_count} --gtf {input.gtf} -s {input.samplesheet} -o {params.outprefix} &> {log}"


    rule run_eisa_default:
        input:
            genes_count=os.path.join("featureCounts.classic_{mode}","featureCounts_genes.tsv"),
            exons_count=os.path.join("featureCounts.classic_{mode}","featureCounts_exons.tsv"),
            gtf=config['annotation'],
            samplesheet=lambda wildcards: sheet_set[wildcards.sheet],
            script=os.path.join(maindir,"scripts","eisa.analysis_default.R")
        output:
            os.path.join("eisa_analysis_default.{mode}","eisa_{sheet}.exon_intron.tsv")
        params:
            outprefix=os.path.join("eisa_analysis_default.{mode}","eisa_{sheet}")
        log:
            os.path.join("eisa_analysis_default.{mode}","log","eisa_{sheet}.exon_intron.log")
        shell:
            "Rscript {input.script} -g {input.genes_count} -e {input.exons_count} --gtf {input.gtf} -s {input.samplesheet} -o {params.outprefix} &> {log}"

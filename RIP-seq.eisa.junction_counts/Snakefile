# - cutadapt, Bowtie2, sambamba, deepTools
import glob, os, yaml

maindir = os.path.abspath(workflow.basedir)
# configfile: None

samplenames, = glob_wildcards(os.path.join(config['bamdir'],'{sample}.filtered.bam'))
samplenames.sort()
print(samplenames)


rule all:
    input:
        expand(os.path.join("bamCoverage","{sample}.eij.bw"), sample = samplenames),
        expand(os.path.join("featureCounts","featureCounts.mode_{mode}.tsv"), mode = ['paired']),
        expand(os.path.join("featureCounts.eij","featureCounts.mode_{mode}.tsv"), mode = ['paired'])

# samtools executes per aligned reads, can be considered SE modee
rule extract_exonic:
    input:
        bam=os.path.join(os.path.join(config['bamdir'],"{sample}.filtered.bam")),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        exon_db=config['exonic_db']
    output:
        bam=temp(os.path.join("tmp","{sample}.exonic.bam")), # ${outprefix}.exonic.bam
        bai=temp(os.path.join("tmp","{sample}.exonic.bam.bai"))
    threads: 6
    shell:
        "samtools view -@ {threads} -b -o {output.bam} -L {input.exon_db} {input.bam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule extract_intronic:
    input:
        bam=rules.extract_exonic.output.bam,
        exon_db=config['intronic_db']
    output:
        bam=temp(os.path.join("tmp","{sample}.eij.bam")), # ${outprefix}.exonic.bam
        bai=temp(os.path.join("tmp","{sample}.eij.bam.bai"))
    threads: 6
    shell:
        "samtools view -@ {threads} -b -o {output.bam} -L {input.exon_db} {input.bam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule filter_CIGAR:
    input:
        bam=rules.extract_intronic.output.bam
    output:
        sam=temp(os.path.join("tmp","{sample}.eij_CIGAR_M.sam")),
        bam=os.path.join("tmp","{sample}.eij_CIGAR_M.bam"),
        bai=os.path.join("tmp","{sample}.eij_CIGAR_M.bam.bai")
    threads: 6
    shell:
        "samtools view -H -@ {threads} {input.bam} > {output.sam} && samtools view -@ {threads} {input.bam} | awk '$6 ~ \"^[[:digit:]]+M$\"' >> {output.sam} && samtools view -@ {threads} -S -b -o {output.bam} {output.sam} && samtools index -@ {threads} {output.bam} {output.bai}"

rule bamCoverage:
    input:
        bam=rules.filter_CIGAR.output.bam,
        bai=rules.filter_CIGAR.output.bai
    output:
        bigwig=os.path.join("bamCoverage","{sample}.eij.bw")
    params:
        params="--binSize 1 --normalizeUsing CPM"
    threads: 12
    log: os.path.join("bamCoverage","log","{sample}.eij.log")
    shell:
        "bamCoverage -p {threads} {params} -b {input.bam} -o {output.bigwig} &> {log}"

rule featureCounts_eij:
    input:
        bamset=expand(os.path.join("tmp","{sample}.eij_CIGAR_M.bam"), sample = samplenames),
        baiset=expand(os.path.join("tmp","{sample}.eij_CIGAR_M.bam.bai"), sample = samplenames),
        gtf=config['annotation']
    output:
        tab=os.path.join("featureCounts.eij","featureCounts.mode_{mode}.tsv")
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t gene -g gene_id -f -s 2"
    threads: 24
    log: os.path.join("featureCounts.eij","log","featureCounts.mode_{mode}.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.gtf} -o {output.tab} {input.bamset} &> {log}"


rule featureCounts_eej:
    input:
        bamset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam'), sample = samplenames),
        baiset=expand(os.path.join(config['bamdir'],'{sample}.filtered.bam.bai'), sample = samplenames),
        gtf=config['annotation']
    output:
        tab=os.path.join("featureCounts","featureCounts.mode_{mode}.tsv")
    params:
        mode=lambda wildcard: "-p -B -C" if wildcard.mode in 'paired' else "",
        feature="-t gene -g gene_id -f -s 2 -J"
    threads: 24
    log: os.path.join("featureCounts","log","featureCounts.mode_{mode}.log")
    shell:
        "featureCounts -T {threads} {params.mode} {params.feature} -a {input.gtf} -o {output.tab} {input.bamset} &> {log}"
